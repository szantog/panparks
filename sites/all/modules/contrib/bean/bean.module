<?php

/**
 * @file
 * Block Entity
 */

/**
 * Implements hook_entity_info()
 */
function bean_entity_info() {
  $return = array(
    'bean' => array(
      'label' => t('Block'),
      'entity class' => 'Bean',
      'controller class' => 'EntityAPIController',
      'base table' => 'bean',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'bid',
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => 'bean_access',
      'module' => 'bean',
      'metadata controller class' => 'BeanMetadataController'
    ),
  );

  foreach (bean_get_types() as $type) {
    if (!empty($type)) {
      $return['bean']['bundles'][$type->type] = array(
        'label' => $type->getLabel(),
        'admin' => array(
          'path' => 'admin/structure/block/types/manage/%bean_type',
          'real path' => 'admin/structure/block/types/manage/' . $type->buildURL(),
          'bundle argument' => 5,
          'access arguments' => array('administer bean types'),
        )
      );
    }
  }

  return $return;
}

/**
 * Implements hook_menu().
 */
function bean_menu() {
  $items = array();

  $items['block/add'] = array(
    'title' => 'Add Block',
    'page callback' => 'bean_add_page',
    'access arguments' => array('add'),
    'access callback' => 'bean_access',
    'file' => 'includes/bean.pages.inc',
  );

  foreach (bean_get_types() as $type) {
   if (!empty($type)) {
      $items['block/add/' . $type->buildURL()] = array(
        'title' => $type->getLabel(),
        'title callback' => 'check_plain',
        'page callback' => 'bean_add',
        'page arguments' => array($type->type),
        'access arguments' => array('create any ' . $type->type . ' bean'),
        'file' => 'includes/bean.pages.inc',
      );
    }
  }

  $items['block/%bean'] = array(
    'title' => 'Block',
    'page callback' => 'bean_view',
    'page arguments' => array(1),
    'access arguments' => array('edit', 1),
    'access callback' => 'bean_access',
    'file' => 'includes/bean.pages.inc',
  );

  $items['block/%bean/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'weight' => -20,
  );


  $items['block/%bean/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'page callback' => 'bean_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit', 1),
    'access callback' => 'bean_access',
    'file' => 'includes/bean.pages.inc',
  );

  $items['block/%bean/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bean_delete_confirm', 1),
    'access callback' => 'bean_access',
    'access arguments' => array('delete', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_NONE,
    'file' => 'includes/bean.pages.inc',
  );


  $items['admin/content/blocks'] = array(
    'title' => 'Blocks',
    'description' => 'Manage blocks used on your site.',
    'page callback' => 'bean_list',
    'access arguments' => array('administer beans'),
    'file' => 'includes/bean.pages.inc',
    'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function bean_admin_paths() {
  $paths = array(
    'block/*/edit' => TRUE,
    'block/*/delete' => TRUE,
    'block/*/revisions' => TRUE,
    'block/*/revisions/*/revert' => TRUE,
    'block/*/revisions/*/delete' => TRUE,
    'block/add' => TRUE,
    'block/add/*' => TRUE,
  );
  return $paths;
}

/**
 * Title of the bean
 */
function bean_page_title($bean) {
  return $bean->label;
}

/**
 * Menu Argument Loader
 */
function bean_type_load($type) {
  return bean_load_plugin_class(strtr($type, array('-' => '_')));
}

/**
 * Gets an array of all bean types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return BeanType[]
 *   Depending whether $type isset, an array of bean types or a single one.
 */
function bean_get_types() {
  $bean_types = &drupal_static(__FUNCTION__);

  if (empty($bean_types)) {
    $bean_types = bean_load_plugin_class_all();
  }

  return $bean_types;
}

/**
 * Fetch the widget plugin info
 */
function bean_fetch_plugin_info($plugin = NULL) {
  $plugins = &drupal_static(__FUNCTION__);
  ctools_include('plugins');

  if (empty($plugins)) {
    // Check the cache
    if (($cache = cache_get('bean_plugins')) && !empty($cache->data)) {
      $plugins = $cache->data;
    }
    else {
      $plugins = ctools_get_plugins('bean', 'types');

      // Only use modules with the same version
      $allowed_modules = array_keys(ctools_plugin_api_info('bean', 'types', bean_current_version(), bean_min_version()));
      foreach ($plugins as $key => $plugin_value) {
        if (!in_array($plugin_value['module'], $allowed_modules)) {
          unset($plugins[$key]);
        }
      }
      cache_set('bean_plugins', $plugins);
    }
  }

  if (empty($plugin)) {
    return $plugins;
  }
  else {
    // Make sure the plugin is in the cache
    if (!isset($plugins[$plugin])) {
      $plugin_info = ctools_get_plugins('bean', 'types', $plugin);
      if (empty($allowed_modules)) {
        $allowed_modules = array_keys(ctools_plugin_api_info('bean', 'types', bean_current_version(), bean_min_version()));
      }
      if (in_array($plugin_info['module'], $allowed_modules)) {
        $plugins[$plugin] = $plugin_info;

        cache_set('bean_plugins', $plugins);
      }
    }

    // If we still don't have the plugin then return NULL
    if (empty($plugins[$plugin])) {
      return NULL;
    }
    return $plugins[$plugin];
  }

}

/**
 * Reset the static variables and caches
 */
function bean_reset() {
  ctools_include('plugins');
  // Clear ctools cache
  ctools_get_plugins_reset();
  drupal_static_reset('ctools_plugins');
  drupal_static_reset('ctools_plugin_type_info_loaded');
  drupal_static_reset('ctools_plugin_type_info');

  // Clear the bean cache
  drupal_static_reset('bean_fetch_plugin_info');
  drupal_static_reset('bean_load_plugin_class');


  //cache_clear_all();

  //$core = array('cache', 'cache_filter', 'cache_bootstrap', 'cache_page');
  //$cache_tables = array_merge(module_invoke_all('flush_caches'), $core);
  //foreach ($cache_tables as $table) {
  //  cache_clear_all('*', $table, TRUE);
  //}
  //drupal_flush_all_caches();
  // Flush plugin caches and rebuild the menu
  cache_clear_all('bean_plugins', 'cache');
  cache_clear_all('ctools_plugin_type_info', 'cache');
  cache_clear_all('ctools_plugin_files', 'cache', TRUE);
  cache_clear_all('plugins', 'cache', TRUE);
  cache_clear_all('bean_types', 'cache');
  cache_clear_all('entity_info', 'cache', TRUE);

  menu_rebuild();
}

/**
 * Load a widget class
 *
 * @param $plugin key - the key fo the plugin
 * @return an object from the plugin
 */
function bean_load_plugin_class($plugin_key = NULL) {
  $cache = &drupal_static(__FUNCTION__);

  if (!isset($cache[$plugin_key])) {
    ctools_include('plugins');
    if ($class = ctools_plugin_load_class('bean', 'types', $plugin_key, 'handler')) {
      $cache[$plugin_key] = new $class(bean_fetch_plugin_info($plugin_key));
    }
  }

  return isset($cache[$plugin_key]) ? $cache[$plugin_key] : FALSE;
}

/**
 * Load all widget classes
 */
function bean_load_plugin_class_all() {
  $return = array();

  foreach (bean_fetch_plugin_info() as $plugin) {
    if (!empty($plugin['name']) && $plugin['name'] !== 'bean' && $plugin_class = bean_load_plugin_class($plugin['name'])) {
      $return[$plugin['name']] = $plugin_class;
    }
  }

  return $return;
}

/**
 * Load all beans
 */
function bean_get_all_beans() {
  $beans = &drupal_static(__FUNCTION__);

  if (!isset($beans)) {
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'bean')
      ->execute();
    if (isset($result['bean'])) {
      $beans = bean_load_multiple(array_keys($result['bean']));
    }
    else {
      $beans = array();
    }
  }

  return $beans;
}

/**
 * Fetch a bean object.
 *
 * @param $bid
 *   Integer specifying the bean id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $bean object or FALSE if it cannot be loaded.
 *
 * @see bean_load_multiple()
 */
function bean_load($bid, $reset = FALSE) {
  $beans = bean_load_multiple(array($bid), array(), $reset);
  return reset($beans);
}

/**
 * Load multiple beans based on certain conditions.
 *
 * @param $bids
 *   An array of bean IDs.
 * @param $conditions
 *   An array of conditions to match against the {bean} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of bean objects, indexed by pid.
 *
 * @see entity_load()
 * @see bean_load()
 */
function bean_load_multiple($bids = array(), $conditions = array(), $reset = FALSE) {
  $beans = entity_load('bean', $bids, $conditions, $reset);
  foreach ($beans as $bid => $bean) {
    try {
      $bean->setPlugin();
      $bean->setFields();
    } catch (BeanException $e) {
      watchdog(WATCHDOG_ERROR, t('Bid: @bid Bean not loaded correctly', array('@bid' => $bean->bid)));
    }
    $beans[$bid] = $bean;
  }

  return $beans;
}

/**
 * Implements hook_permissions()
 */
function bean_permission() {
  $perms = array(
    'administer bean types' =>  array(
      'title' => t('Administer block types'),
      'description' => t('Create and delete fields on beans, and set their permissions.'),
    ),
    'administer beans' =>  array(
      'title' => t('Administer beans'),
      'description' => t('Edit and view all beans.'),
    ),
  );

  // Add a Permission for each entity type
  foreach (bean_get_types() as $bean_type) {
    $bean_type_name = check_plain($bean_type->type);
    $perms += array(
      "create any $bean_type_name bean" => array(
        'title' => t('%type_name: add Bean', array('%type_name' => $bean_type->getLabel())),
      ),
      "edit any $bean_type_name bean" => array(
        'title' => t('%type_name: Edit Bean', array('%type_name' => $bean_type->getLabel())),
      ),
      "view any $bean_type_name bean" => array(
        'title' => t('%type_name: View Bean', array('%type_name' => $bean_type->getLabel())),
      ),
      "delete any $bean_type_name bean" => array(
        'title' => t('%type_name: delete Bean', array('%type_name' => $bean_type->getLabel())),
      ),
    );
  }

  return $perms;
}

/**
 * Access callback for the entity API.
 */
function bean_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer bean types', $account);
}

/**
 * Determines whether the given user has access to a bean.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $bean
 *   Optionally a bean or a bean type o check access for. If nothing is
 *   given, access for all beans is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function bean_access($op, $bean = NULL, $account = NULL) {
  if (user_access('administer beans', $account)) {
    return TRUE;
  }

  switch ($op) {
    case 'view':
    case 'delete':
    case 'create':
      $op = $op;
      break;
    case 'add':
      $op = 'create';
      break;
    default:
      $op = 'edit';
  }

  if (isset($bean) && $type_name = $bean->type) {
    if (user_access("$op any $type_name bean", $account)) {
      return TRUE;
    }

  }
  else {
    // Here we are looking for access to any of the types
    foreach (bean_get_types() as $bean_type) {
      $perm = $op . ' any ' . $bean_type->type . ' bean';
      if (user_access($perm, $account)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Inserts or updates a bean object into the database.
 *
 * @param $bean
 *   The bean object to be inserted.
 *
 * @return
 *   Failure to write a record will return FALSE. Otherwise SAVED_NEW or
 *   SAVED_UPDATED is returned depending on the operation performed.
 */
function bean_save(Bean $bean) {
  return $bean->save();
}

/**
 * Deletes an existing bean.
 *
 * @param $bean
 *   The message object to be bean.
 */
function bean_delete(Bean $bean) {
  return $bean->delete();
}

/**
 * Helper to easily create a bean.
 *
 * @param $values
 *   Array with the following keys:
 *   - "arguments" - Array with arguments that should be replaced on run time in
 *     the message type.
 */
function bean_create($values) {
  return entity_create('bean', $values);
}

/**
 * Implements hook_block_info().
 */
function bean_block_info() {
  $blocks = array();
  $beans = bean_get_all_beans();
  foreach ($beans as $bean) {
    $blocks[$bean->bid] = array(
      'info' => $bean->label,
      'cache' => $bean->getInfo('cache_level'),
    );
  }

  return $blocks;
}

/**
 * Implements hook_block_view
 */
function bean_block_view($delta = '') {
  $bean = bean_load($delta);

  if (bean_access('view', $bean) && $bean) {
    return array(
      'content' => $bean->view(),
      'subject' => $bean->title,
    );
  }
}

/**
 * Define the name of the api hook
 */
function bean_types_hook_name() {
  return 'bean_types_api_info';
}

/**
 * The current version of the API
 */
function bean_current_version() {
  return 1;
}

/**
 * The minimal version
 */
function bean_min_version() {
  return 1;
}

/**
 * Implements hook_bean_types_api_info().
 */
function bean_bean_types_api_info() {
  return array(
    'api' => bean_current_version(),
  );
}

/**
 * Implements hook_ctools_plugin_type()
 */
function bean_ctools_plugin_type() {
  return array(
    'types' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
      'defaults' => array(
        'label' => t('Block'),
        'cache_level' => DRUPAL_CACHE_PER_ROLE,
        // Editable in the block type UI
        // THESE should have 'bean_custom' as the class
        'editable' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function bean_ctools_plugin_directory($module, $type) {
  if ($module == 'bean') {
    return 'plugins';
  }
}

/**
 * Implements hook_bean_types()
 */
function bean_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'bean') . '/plugins';

  $plugins['bean'] = array(
    'handler' => array(
      'path' => $plugin_path,
      'file' => 'base.inc',
      'class' => 'bean_plugin',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_theme().
 */
function bean_theme() {
  return array(
    'bean' => array(
      'render element' => 'entity',
    ),
    'bean_add_list' => array(
      'variables' => array('content' => NULL),
    ),
  );
}

/**
 * Implements hook_block_view_alter().
 */
function bean_block_view_alter(&$data, $block) {
  if ($block->module == 'bean') {
    $data['content']['#contextual_links']['bean'] = array('block', array($block->delta));
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function bean_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link to 'block/add' on 'admin/content/blocks' page.
  if ($root_path == 'admin/content/blocks') {
    $item = menu_get_item('block/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}