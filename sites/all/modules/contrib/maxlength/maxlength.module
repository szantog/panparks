<?php

/**
 * Implements hook_help().
 */
function maxlength_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#maxlength_js':
      return '<p>' . t('Maxlength creates a new Form Property: #maxlength_js which in conjunction with #maxlength will enforce, via JavaScript, the maxlength of a textfield or textarea and will show the number of characters left.') . '</p>';
      return '<p>' . t('Using the field setting page, you can limit textfields and textareas. For textfields this module will use the "<strong>Maximum length</strong>" value set in the <strong>field settings</strong>') . '</p>';
  }
}

/**
 * Implements hook_element_info_alter().
 */
function maxlength_element_info_alter(&$cache) {
  // Add prerender functions to textareas and text fields
  $cache['textfield']['#pre_render'][] = 'maxlength_pre_render';
  $cache['textarea']['#pre_render'][] = 'maxlength_pre_render';
  $cache['text_format']['#pre_render'][] = 'maxlength_pre_render';
}

function maxlength_pre_render($element) {
  if (isset($element['#maxlength']) && $element['#maxlength'] > 0 && isset($element['#maxlength_js']) && $element['#maxlength_js'] === TRUE) {
    $element['#attributes']['class'][] = 'maxlength';
    if ($element['#type'] != 'textfield') {
      $element['#attributes']['maxlength'] = $element['#maxlength'];
    }
    $element['#attached']['js'][] = drupal_get_path('module', 'maxlength') . '/js/maxlength.js';
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function maxlength_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  // Add settings for textarea widgets
  $fields = array('text_textarea_with_summary', 'text_textarea');
  if(in_array($form['#instance']['widget']['type'], $fields)) {
    $form['instance']['widget']['settings']['maxlength_js'] = array(
      '#type' => 'textfield',
      '#title' => 'Maxlength JS',
      '#description' => t('The maximum length of the field in characters.'),
      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js']) ? $form['#instance']['widget']['settings']['maxlength_js'] : NULL,
    );
  }
  // Add settings for textfield widgets
  $fields = array('text_textfield');
  if(in_array($form['#instance']['widget']['type'], $fields)) {
    $form['instance']['widget']['settings']['maxlength_js'] = array(
      '#type' => 'checkbox',
      '#title' => 'Maxlength JS',
      '#description' => t('Limit the maximum length of the field in characters using the "<strong>Maximum length</strong>" value set in the <strong>field settings</strong> using Javascript.'),
      '#default_value' => isset($form['#instance']['widget']['settings']['maxlength_js']) ? $form['#instance']['widget']['settings']['maxlength_js'] : NULL,
    );
  }

  $form['instance']['widget']['settings']['maxlength_js_label'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Count down message'),
    '#default_value' =>  isset($form['#instance']['widget']['settings']['maxlength_js_label']) ? $form['#instance']['widget']['settings']['maxlength_js_label'] : 'Content limited to @limit characters, remaining: <strong>@remaining</strong>',
    '#description' => t('The text used in the Javascript message under the input, where "@limit", "@remaining" and "@count" are replaced by the appropriate numbers.'),
  );
}

/**
 * Implements hook_field_attach_form().
 */
function maxlength_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $fields = field_info_instances($entity_type, $form['#bundle']);
  // Check if any of the fields has a #maxlength_js setting
  foreach ($fields as $field_name => $value) {
    if (isset($value['widget']['settings']['maxlength_js']) && $value['widget']['settings']['maxlength_js'] > 0) {
      $elements[$field_name] = $value;
    }
  }
  if (isset($elements)) {
    _maxlength_children($form, $elements);    
  }
}

/**
 * Recursively add the #maxlength_js and #maxlength properties to the elements
 * of a form
 *
 * @todo: This function is currently only working for fieldapi fields.
 *
 * @param $element
 *   The form element to start looking for
 * @param $ms_elements
 *   An associative array of api field elements as returned by
 *   field_info_instances() that the #maxlength and #maxlength_js properties
 *   should be set, with the field_name as a key and the field_data as the value
 */
function _maxlength_children(&$element, $ms_elements) {
  $children = element_get_visible_children($element);
  foreach ($children as $child) {
    // Check if the field settings for maxlength_js are set and add the maxlength and the label text.
    if (isset($element[$child]['#field_name']) && isset($ms_elements[$element[$child]['#field_name']])) {
      $element[$child]['#maxlength'] = isset($element[$child]['#maxlength']) ? $element[$child]['#maxlength'] : $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js'];
      $element[$child]['#maxlength_js'] = TRUE;

      $maxlength_js_label = !empty($ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_label']) ?
        $ms_elements[$element[$child]['#field_name']]['widget']['settings']['maxlength_js_label'] : 'Content limited to @limit characters, remaining: <strong>@remaining</strong>';

      // @todo: Shouldn't it support multi-fields as well?
      $element[$child][0]['#attributes']['maxlength_js_label'] = array($maxlength_js_label);
    }
    _maxlength_children($element[$child], $ms_elements);
  }
}

/**
 * Implements hook_form_alter().
 */
function maxlength_form_alter(&$form, &$form_state, $form_id) {
  // Attach maxlength to node title
  if (strpos($form_id, '_node_form') !== FALSE && variable_get('maxlength_js_' . $form['#node']->type, FALSE)) {
    if (!module_exists('title') || title_field_replacement_enabled('node', $form['#node']->type, 'title') !== TRUE) {
      $form['title']['#maxlength_js'] = TRUE;
      $form['title']['#maxlength'] = intval(variable_get('maxlength_js_' . $form['#node']->type, ''));

      $form['title']['#attributes']['maxlength_js_label'] = array();
      $form['title']['#attributes']['maxlength_js_label'][] = variable_get('maxlength_js_text_' . $form['#node']->type, 'Content limited to @limit characters, remaining: <strong>@remaining</strong>');
      maxlength_pre_render($form['title']);
    }
  }
}

/**
 * Implements hook_form_node_type_alter().
 */
function maxlength_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  // Add maxlength setting to node type form
  $form['submission']['maxlength_js'] = array(
    '#type' => 'textfield',
    '#title' => 'Maxlength JS',
    '#description' => t('The maximum length of the field in characters.'),
    '#default_value' => variable_get('maxlength_js_' . $form['#node_type']->type, ''),
  );
  $form['submission']['maxlength_js_label'] = array(
    '#type' => 'textarea',
    '#rows' => 2,
    '#title' => t('Count down message'),
    '#default_value' =>  variable_get('maxlength_js_label_' . $form['#node_type']->type, 'Content limited to @limit characters, remaining: <strong>@remaining</strong>'),
    '#description' => t('The text used in the Javascript message under the input, where "@limit", "@remaining" and "@count" are replaced by the appropriate numbers.'),
  );
}