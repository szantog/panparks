<?php

/**
 * @file
 *   panparks_hooks.module
 * Project:panparks
 *    Overriden hooks for panparks.org
 *
 * @developers:
 *    Gabor Szanto <hello@szantogabor.com>
 *    http://szantogabor.com
 *
 *    Tamas Pinter <tamas@netstandard.hu>
 *    http://netstandard.hu
 *
 */

/**
 * Implements hook_boot().
 */
function panparks_hooks_boot() {
  if (panparks_hooks_is_omt()) {
    drupal_page_is_cacheable(FALSE);
    $GLOBALS['conf']['cache'] = 0;
    //@todo (need to bootstrap only the variables??)
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL, TRUE);
  }
}


function panparks_hooks_is_omt() {
  $urlparts = explode('.', $_SERVER['HTTP_HOST']);
  if ($urlparts[0] == 'onemilliontweets') {
    return TRUE;
  }
}

/**
 * Implements hook_init().
 */
function panparks_hooks_init() {
  //This need because of there are some page view with this end argument, what is used only in node view field.
  //With this just prevent duplacted content
  if (end(arg()) == 'not-found') {
    return drupal_not_found();
  }

  if (panparks_hooks_is_omt()) {
    $GLOBALS['conf']['cache'] = 0;
  }
}

function panparks_hooks_url_inbound_alter(&$path, $original_path, $path_language) {
  $executed = &drupal_static(__FUNCTION__ . '__executed');
  if (panparks_hooks_is_omt() && $original_path == 'home' && !$executed) {
    //if ($original_path == 'home') {
      $path = 'node/2597';
      menu_set_active_item($path);
    //}
    //else {
      //drupal_not_found();
    //}
  }
}
/**
 * Implements hook_url_outbund_alter
 * Rewrite URL's in onemilliontweets page all links need to point to main domain
 * And in main domain all links to original node need to point to subdomain.
 */
function panparks_hooks_url_outbound_alter(&$path, &$options, $original_path) {
  global $base_url;
  if ($path == 'node/2597' && !panparks_hooks_is_omt()) {
    $options['absolute'] = TRUE;
    $options['base_url'] = 'http://onemilliontweets.panparks.org';
    $path = '';
  }

  if ($options['absolute'] == FALSE && panparks_hooks_is_omt()) {
    $options['base_url'] = $base_url;
    $options['absolute'] = TRUE;
  }
}

/*
 * Implements hook_context_load_alter
 * If we are in subdomain, the context condition path <front> is active, need to prevent activation
 */
function p_anparks_hooks_context_load_alter(&$context) {
  if (panparks_hooks_is_omt()) {
    if (!is_null($context->conditions)) {
      foreach ($context->conditions as $key => $condition) {
        if ($key == 'path' && !is_null($condition['values'])) {
          unset($context->conditions['path']['values']['<front>']);
        }
      }
    }
  }
}

function panparks_hooks_file_url_alter(&$uri) {
  if (panparks_hooks_is_omt()) {
    global $base_url;
    $schemes = array('public', 'private');
    $scheme = file_uri_scheme($uri);


    if (!$scheme || in_array($scheme, $schemes)) {
      // Shipped files.
      if (!$scheme) {
        $path = $uri;
      }
      // Public created files.
      else {
        $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
        if (is_object($wrapper)) {
          $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($uri);
        }
      }

      // Clean up Windows paths.
      if (!is_null($path)) {

      }
      $path = str_replace('\\', '/', $path);
      $uri =  $base_url . '/' . $path;
      //dsm(get_defined_vars());
      //dsm($path);
    }
  }
}
/**
 * Implementation of hook_element_info_alter().
 */
function panparks_hooks_element_info_alter(&$type) {
  if (isset($type['date_text'])) {
    //We need a custom process function to modify some text
    $type['date_text']['#process'][] = 'panparks_hooks_text_element_process';
  }

  if (isset($type['managed_file'])) {
    $type['managed_file']['#pre_render'][] = 'panparks_hooks_sources_field_pre_render';
  }
}

/**
 * Modify default description was set in date date_text process
 *
 * @param array $element
 * @return array
 *   the timezone form element
 *
 * @see date_text_element_process($element, $form_state, $form)
 */
function panparks_hooks_text_element_process($element, $form_state, $form) {
  $element['date']['#description'] = ' ' . t('Format: mm/yyyy (eg. @date)', array('@date' => date_now()->format($element['#date_format'])));
  //dsm(get_defined_vars());
  return $element;
}

/*
 * Add access rule to filefield remote source
 */
function panparks_hooks_sources_field_pre_render($element)  {
  global $user;
  if (isset($element['filefield_remote'])) {
    if (empty($user->roles[4]) && empty($user->roles[3])) {
      $element['filefield_sources_list']['#access'] = FALSE;
      $element['filefield_remote']['#access'] = FALSE;
    }
  }
  return $element;
}
/**
 * Implementation of hook_form_alter().
 */
function panparks_hooks_form_alter(&$form, $form_state, $form_id) {
  //dsm($form_id);
  //dsm($form_state);
  //dsm($form);
}

/**
 * Implementation of hook_form_views_exposed_form_alter().
 * Reverse years in news exposed
 */
function panparks_hooks_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-news-page') {
    $form['#after_build'][] = 'panparks_hooks_reverse_date';
  }

}

/*
 * Afterbuild function for panparks_hooks_form_views_exposed_form_alter()
 */
function panparks_hooks_reverse_date($form, &$form_state) {
  array_shift($form['date_filter']['value']['year']['#options']);
  $form['date_filter']['value']['year']['#options'] = array_reverse($form['date_filter']['value']['year']['#options']);
  return $form;
}
/**
 * Implementation of hook_form_search_form_alter().
 * Set off the download original checkbox on node add page
 */
function panparks_hooks_form_search_form_alter(&$form, &$form_state) {
  $form['basic']['keys']['#title'] = t('search..');
  //dsm(get_defined_vars());
}

/**
 * Implementation of hook_form_media_gallery_node_form_alter().
 * Set off the download original checkbox on node add page
 */
function panparks_hooks_form_media_gallery_node_form_alter(&$form, &$form_state) {
  if (arg(1) == 'add') {
    $form['settings_wrapper']['presentation']['media_gallery_allow_download']['und']['#default_value'] = 0;
  }
}

/**
 * Implementation of hook_form_media_edit_alter().
 * Add some custom description
 */
function panparks_hooks_form_media_edit_alter(&$form, &$form_state) {
  if (isset($form['media_title'])) {
    $form['media_title'][LANGUAGE_NONE][0]['value']['#description'] = t('Title is used on colorbox, and in the alt/title attributes of image.');
  }
  if (isset($form['media_description'])) {
    $form['media_description'][LANGUAGE_NONE][0]['#description'] = t('Description appears under the image.');
  }
}

/**
 * Implementation of hook_form_media_format_form_alter().
 * Remove some display type when inserting image to wysiwyg
 */
function panparks_hooks_form_media_format_form_alter(&$form, &$form_state) {
  if (isset($form['options']['alt'])) {
    $form['options']['alt']['#title'] = t('Alt');
  }
  if (isset($form['options']['format']['#options']['token'])) {
    unset($form['options']['format']['#options']['token']);
  }
  if ($form['#media']->type == 'image') {
    if (isset($form['options']['format']['#options']['media_preview'])) {
      unset($form['options']['format']['#options']['media_preview']);
    }
    if (isset($form['options']['format']['#options']['media_large'])) {
      unset($form['options']['format']['#options']['media_large']);
    }
    if (isset($form['options']['format']['#options']['media_link'])) {
      unset($form['options']['format']['#options']['media_link']);
    }
    if (isset($form['options']['format']['#options']['full'])) {
      unset($form['options']['format']['#options']['full']);
    }
    $form['options']['format']['#options'] = array_reverse($form['options']['format']['#options'], TRUE);
  }
}

/**
 * Implementation of hook_menu().
 *
 * @return An array of menu items.
 */
function panparks_hooks_menu() {
  $items = array();

  $items['home'] = array(
    'description' => 'description',
    'page callback' => 'panparks_hooks_page_home',
    'access arguments' => array('access content'),
  );

  $items['node/%node/colorbox-photo'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    'page callback' => 'panparks_hooks_node_page_view',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function panparks_hooks_menu_alter(&$items) {
  // move user menu path
  $items['get-involved/join-now'] = $items['user/register'];
  $items['get-involved/join-now']['type'] = MENU_NORMAL_ITEM;
  $items['get-involved/join-now']['weight'] = -10;
  $items['get-involved/join-now']['title'] = t('Join us today!');

  $items['get-involved/join-now/register'] = $items['user/register'];
  $items['get-involved/join-now/register']['type'] = MENU_DEFAULT_LOCAL_TASK;
  $items['get-involved/join-now/register']['weight'] = -10;
  $items['get-involved/join-now/register']['title'] = t('Join us today!');

  $items['get-involved/join-now/password'] = $items['user/password'];

  $items['get-involved/join-now/login'] = $items['user'];
  $items['get-involved/join-now/login']['title'] = 'Log in';
  $items['get-involved/join-now/login']['access callback'] = 'user_is_anonymous';
  $items['get-involved/join-now/login']['type'] = MENU_LOCAL_TASK;
  $items['get-involved/join-now/login']['weight'] = 5;
  unset($items['get-involved/join-now/login']['title callback']);
  unset($items['get-involved/join-now/login']['menu_name']);


  // Redirect /user paths.
  $items['user']['page callback'] = 'panparks_hooks_user_goto';
  $items['user']['page arguments'] = array('get-involved/join-now/login');

  $items['user/login']['page callback'] = 'drupal_goto';
  $items['user/login']['page arguments'] = array('get-involved/join-now/login');

  $items['user/register']['page callback'] = 'drupal_goto';
  $items['user/register']['page arguments'] = array('get-involved/join-now/register');

  $items['user/password']['page callback'] = 'drupal_goto';
  $items['user/password']['page arguments'] = array('get-involved/join-now/password');
}

function panparks_hooks_user_goto($uri) {
  if ($GLOBALS['user']->uid) {
    return user_page();
  }
  else {
    drupal_goto($uri);
  }
}

function panparks_hooks_page_home(){
  return '';
}

/**
 * Menu callback; render a single node for in colorbox.
 */
function panparks_hooks_node_page_view($node) {
  if ($node->type == 'photo_shared') {

    drupal_set_title($node->title);
    // Update the history table, stating that this user viewed this node.
    node_tag_new($node);

    if ($_GET['teaser']) {
      $node_view = node_view($node, 'teaser');
    }
    else {
      $node_view = node_view($node, 'full');
    }
    print drupal_render($node_view);;
    exit();
  }
  //We only need this display, if the content type is photo_share, and try to show in colorbox
  return drupal_not_found ();
}

/*
 * Implements hook_node_presave
 */
function panparks_hooks_node_presave($node) {
  // auto meta description
  if (isset($node->meta_description)) {
    $summary = text_summary($node->body['und'][0]['value'], $node->body['und'][0]['format'], 240);

    if (empty($node->meta_description['und'])) {
      // create description
      $node->meta_description['und'][0]['metatags_quick'] = $summary;
    }
    else {
      $original_summary = text_summary($node->original->body['und'][0]['value'], $node->original->body['und'][0]['format'], 240);

      // auto save changed body and not changed description
      if ($original_summary == $node->original->meta_description['und'][0]['metatags_quick']) {
        if ($node->meta_description['und'][0]['metatags_quick'] == $node->original->meta_description['und'][0]['metatags_quick']) {
          $node->meta_description['und'][0]['metatags_quick'] = $summary;
        }
      }
    }
  }
  //
  // Workaround for Feeds module setting text format to Plain Text instead of Full HTML or Filtered HTML
  //
  if ($node->type == 'transferred_blog_posts') {
    $node->body[$node->language][0]['format'] = 'full_html';
  }

  //
  // Set default image to wilderness and resources ct.
  //
  if ($node->type == 'wilderness_resources' && isset($node->field_image)) {
    $node->field_image[$node->language][0]['fid'] = 1392;
  }

  //
  // Set default alt && title text to images.
  //
  foreach($node as $field_name => &$field) {
    if (is_array($field) && !empty($field[$node->language])) {
      foreach ($field[$node->language] as &$field_item) {
        if (isset($field_item['fid']) && $file = file_load($field_item['fid'])) {
          if ($file->type == 'image') {
            $field_item['alt'] = $node->title;
            $field_item['title'] = $node->title;
          }
        }
      }
    }
  }
}

/*
 * Implements hook_process_breadcrumb
 */
function panparks_hooks_process_breadcrumb(&$variables) {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $arg2 = arg(2);
    if (empty($arg2)) {
      $node = node_load(arg(1));

      if (isset($node->field_park) && isset($node->field_park['und'][0]['node'])) {
        $park_node = $node->field_park['und'][0]['node'];
      }

      if (isset($node->field_parks) && isset($node->field_parks['und'][0]['node'])) {
        $park_node = $node->field_parks['und'][0]['node'];
      }

      if (isset($park_node)) {
        if ($node->type == 'accommodation') {
          $variables['breadcrumb'][] = l('Accommodation, services', 'node/' . $park_node->nid . '/accomodation-services');
        }
        elseif ($node->type == 'tours_and_holdiays') {
          $variables['breadcrumb'][] = l('Tours and Holidays', 'node/' . $park_node->nid . '/tours-holidays');
        }
      }
    }
  }
}


function panparks_hooks_ctm_img_assist_change_token_alter($tag, $vars) {
  //dsm(get_defined_vars());
  return $tag;
}

function panparks_hooks_ctm_img_assist_fetch_alter(&$fetched, &$entity) {
  foreach ($fetched as $key => &$value) {
    $image = _panparks_api_get_tmp_main_picture_old_nid($value['nid'], 'image');
    $value['nid'] = $image[0]->entity_id;
    if ($value['title'] == 'Photo') {
      $value['photo'] = $value['title'] . ': ' . $value['alt'];
    }
    else {
      $value['description'] = $value['title'] . ' ' . $value['alt'];
    }
    $value['alt'] = $entity->title;
    $value['title'] = $entity->title;
  }
}

function panparks_hooks_media_file_build_alter(&$file, &$context) {
  $values = $context['form_state_values'];
  if (!empty($values['media_title'])) {
    $file->media_title[LANGUAGE_NONE][0]['value'] = $values['media_title'];
  }
  else {
    $file->media_title[LANGUAGE_NONE][0]['value'] = _media_gallery_get_media_title($file);
  }
  if (!empty($values['media_description'])) {
    $file->media_description[LANGUAGE_NONE][0] = array(
      'value' => $values['media_description'],
      'format' => 'editor',
    );
  }
  if (!empty($values['field_photographer'])) {
    $file->field_photographer[LANGUAGE_NONE][0]['value'] = $values['field_photographer'];
  }
}

/*
 * Implements hook_page_alter
 */
function panparks_hooks_page_alter(&$page) {
  //Tried to play with weight, but nothing to happend
  //Need to direct reorder the array
  if (isset($page['content']['bean_54'])) {
    $tmp = $page['content']['system_main'];
    unset($page['content']['system_main']);
    $page['content']['bean_54']['#weight'] = 0;
    $page['content']['system_main'] = $tmp;
  }

  if (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'photo-shared' && !empty($page['content']['system_main']['main']['#markup'])) {
    $item = menu_get_item();
    $output = array();
    if ($item['access'] == FALSE) {
      $output = array(
        'text' => array(
          '#markup' => t('To use this function you need to login or register.')
        ),
        'form' => drupal_get_form('user_login_block'),
      );
      $page['content']['system_main']['main']['#markup'] = drupal_render($output);
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Add view modes to the file entity type, appropriate for displaying media.
 */
function panparks_hooks_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['panparks_fit'] = array('label' => t('Normal fit'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['panparks_fill'] = array('label' => t('Normal fill'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['panparks_square'] = array('label' => t('Square thumbnail'), 'custom settings' => TRUE);
  $entity_info['file']['view modes']['panparks_full_width'] = array('label' => t('Full width'), 'custom settings' => TRUE);
}

/*
 * Implements hook_view_entity_alter
 */
function panparks_hooks_entity_view_alter(&$build, $type) {
  //Build contextual links on fields, if field type is image
  foreach (element_children($build) as $field) {
    if (isset($build[$field]['#field_type']) && ($build[$field]['#field_type'] == 'image' || $build[$field]['#field_type'] == 'media') && $build['#bundle'] != 'media_gallery') {

      foreach (element_children($build[$field]) as $delta) {
        if (is_numeric($delta) && user_access('access contextual links')) {
          $build[$field][$delta]['#contextual_links']['field_image'] = array('file', array($build[$field]['#items'][$delta]['fid']));
          $build[$field][$delta]['#theme_wrappers'] = array('panparks_hooks_contextual_links');
        }
      }
    }
  }

  //In park before visiting pages we need to add wrapper with id to create anchored links block
  if ($build['#entity_type'] == 'node' && $build['#bundle'] == 'park') {
    $nid = isset($build['#node']->nid) ? $build['#node']->nid : NULL;
    //The fields where need wrapper around
    $add_id = array(
      'field_park_bvtp_bvtp',
      'field_park_bvtp_htgt',
      'field_park_bvtp_vc',
      'field_park_bvtp_pf',
      'field_park_bvtp_ositp',
      'field_park_bvtp_rules',
    );
    foreach ($add_id as $key) {
      if (!is_null($nid) && !empty($build[$key][0]['#markup'])) {
        $build[$key]['#prefix'] = '<div id="' . str_replace('_', '-', $key) . '">';
        $build[$key]['#suffix'] = '</div>';
      }
    }
  }
  if ($build['#entity_type'] == 'bean' && $build['#entity']->bid == 21) {
    $build['field_website']['#items'][0]['attributes']['class'] = 'colorbox-load';
    $build['field_website']['#items'][0]['query'] = array('width' => '970', 'height' => '300', 'iframe' => 'true');
    $build['field_website'][0]['#markup'] = theme('link_formatter_link_default', array('element' => $build['field_website']['#items'][0]));
  }
}

function panparks_hooks_contextual_links_view_alter(&$element, $items) {
  if (isset($element['#contextual_links']['block']) && $element['#contextual_links']['block'][1][0] == 'bean') {
    $bean_id = $element['#contextual_links']['block'][1][1];
    $element['#links']['bean-edit'] = array(
      'title' => t('Edit block'),
      'href' => 'block/' . $bean_id . '/edit',
      'query' => isset($element['#links']['block-configure']['query']) ? $element['#links']['block-configure']['query']  : NULL,
    );
  }
  if (isset($element['#contextual_links']['field_image']) && isset($element['#links']['field-image-edit'])) {
    $element['#links']['field-image-edit']['title'] = t('Edit image');
  }
}

/**
 * Implements hook_theme().
 */
function panparks_hooks_theme() {
  $items = array(
    'panparks_hooks_contextual_links' => array(
      'render element' => 'element',
      'template' => 'contextual_links_wrapper',
    ),
  );
  return $items;
}

/*
 * Preprocess variables for page.tpl.php
 */
function panparks_hooks_preprocess_page(&$variables, $hook) {
  //Change the register page title
  if (arg(0) == 'get-involved' && arg(1) == 'join-now' && !arg(2)) {
    drupal_set_title(t('Join us today!'));
  }
}

/*
 * Preprocess variables for node.tpl.php
 */
function panparks_hooks_preprocess_node(&$variables, $hook) {
  $content = $variables['content'];
  //Temporary solution to add own image edit link to media images.
  foreach (element_children($content) as $key) {
    if (isset($content[$key]['#field_type']) && ($content[$key]['#field_type'] == 'image' || $content[$key]['#field_type'] == 'media')) {
      foreach (element_children($content[$key]) as $delta) {
        if (is_numeric($delta)) {
          $path = 'media/' . $content[$key]['#items'][$delta]['fid'] . '/edit';
          $menu_item = menu_get_item($path);
          if ($menu_item['access']) {
          $link = array(
            '#type' => 'link',
            '#href' => $path,
            '#title' => t('Edit image'),
            '#options' => array(
              'attributes' => array('class' => array('media-edit-link'), 'id' => 'cool-id'),
              'html' => FALSE,
              'query' => array('destination' => $_GET['q']),
            ),
          );
          //$content[$key][$delta]['#prefix'] = '<div class="contextual-links-wrapper"><ul class="contextual-links"><li>' . drupal_render($link) . '</li></ul></div>';

          }
        }
      }
    }
  }
  //kpr(get_defined_vars());
  $variables['content'] = $content;
}

/**
 * Implements panparks_hooks_preprocess_panparks_hooks_contextual_links
 */
function panparks_hooks_preprocess_panparks_hooks_contextual_links(&$variables) {
  if (isset($variables['element']['class'])) {
    $variables['classes_array'][] = $variables['element']['class'];
  }
  $variables['content'] = $variables['element']['#children'];
}


function panparks_hooks_preprocess_field_collection_view($vars) {
  //dsm($vars);
}

/*
 * Implements preprocess_views_view_fields
 */
function panparks_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];
  $row_index = $vars['id'] - 1;
  //Add contextual links to visit page blocks rendered by views
  if ($view->name == 'visit_page_sidebar' && user_access('access contextual links')) {
    $cont_links['#contextual_links']['view_block'] = array('block', array($view->result[$row_index]->bid));
    $cont_links['#theme_wrappers'] = array('panparks_hooks_contextual_links');
    $vars['contextual_links'] = drupal_render($cont_links);
  }
}

