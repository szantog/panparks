<?php

/**
 * Implements hook_permission().
 */
function panparks_slideshow_permission() {
  return array(
    'administer panparks slideshow type' =>  array(
      'title' => t('Administer panparks slideshow type'),
      'restrict access' => TRUE,
    ),
    'administer panparks slideshow' =>  array(
      'title' => t('Administer panparks slideshow'),
      'restrict access' => TRUE,
    ),
    'access panparks slideshow' => array(
      'title' => t('View panparks slideshow'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function panparks_slideshow_menu(){
  $items['admin/structure/slideshow'] = array(
    'title' => 'Panparks slideshow',
    'description' => 'Manage panparks slideshow structure',
    'page callback' => 'panparks_slideshow_overview_type',
    'access arguments' => array('administer panparks slideshow type'),
  );

  $items['admin/structure/slideshow/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['slideshow'] = array(
    'title' => 'Panparks slideshow',
    'description' => 'Manage panparks slideshow',
    'page callback' => 'panparks_slideshow_overview_page',
    'access arguments' => array('administer panparks slideshow'),
    'file' => 'includes/panparks_slideshow.pages.inc',
  );

  $items['slideshow/list'] = array(
    'title' => 'List',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['slideshow/add'] = array(
    'title' => 'Add panpark slideshow',
    'page callback' => 'panparks_slideshow_add',
    'access arguments' => array('administer panparks slideshow'),
    'file' => 'includes/panparks_slideshow.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['slideshow/%panparks_slideshow'] = array(
    'title' => 'Edit panparks slideshow',
    'page callback' => 'panparks_slideshow_edit',
    'page arguments' => array(1),
    'access arguments' => array('administer panparks slideshow'),
    'file' => 'includes/panparks_slideshow.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['slideshow/%panparks_slideshow/delete'] = array(
    'title' => 'Deleted panparks slideshow',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panparks_slideshow_delete_confirm', 1),
    'access arguments' => array('administer panparks slideshow'),
    'file' => 'includes/panparks_slideshow.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function panparks_slideshow_entity_info() {
  return array(
    'panparks_slideshow' => array(
      'label' => t('Panparks slideshow'),
      'controller class' => 'panparksSlideshowController',
      'base table' => 'panparks_slideshow',
      'uri callback' => 'panparks_slideshow_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'slid',
        'bundle' => 'type',
      ),
      'bundles' => array(
        'slideshow' => array(
          'label' => t('Panparks slideshow'),
          'admin' => array(
            'path' => 'admin/structure/slideshow',
            'access arguments' => array('administer panparks slideshow type'),
          ),
        ),
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full slideshow'),
          'custom settings' =>  FALSE,
        ),
      ),
    ),
  );
}

class panparksSlideshowController extends DrupalDefaultEntityController {

}

/*
 * Implements hook_views_api().
 */
function panparks_slideshow_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'panparks_slideshow') . '/views',
  );
}

/**
 * Implements hook_uri().
 * @param $slideshow
 * @return array
 */
function panparks_slideshow_uri($slideshow) {
  return array(
    'path' => 'slideshow/' . $slideshow->slid,
  );
}

/**
 * Load a panparks slideshow object from the database.
 *
 * @param $slid
 *   The slideshow ID.
 * @param $reset
 *   Whether to reset the slideshow_load_multiple cache.
 *
 * @return
 *   A fully-populated panparks slideshow object.
 */
function panparks_slideshow_load($slid = NULL, $reset = FALSE) {
  $slids = (isset($slid) ? array($slid) : array());

  $slideshow = panparks_slideshow_load_multiple($slids, array(), $reset);
  return $slideshow ? reset($slideshow) : FALSE;
}

/**
 * Load panparks slideshow entities from the database.
 *
 * This function should be used whenever you need to load more than one slideshow
 * from the database. Slideshows are loaded into memory and will not require
 * database access if loaded again during the same page request.
 *
 * @see entity_load()
 * @see EntityFieldQuery
 *
 * @param $slids
 *   An array of panparks slideshow IDs.
 * @param $conditions
 *   An associative array of conditions on the {panparks_slideshow}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 * @param $reset
 *   Whether to reset the internal panparks_slideshow_load cache.
 *
 * @return
 *   An array of slideshow objects indexed by slid.
 */
function panparks_slideshow_load_multiple($slids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('panparks_slideshow', $slids, $conditions, $reset);
}

/**
 * Save changes to a slideshow or add a new slideshow.
 *
 * @param $slideshow
 *   The $slideshow object to be saved. If $slideshow->slid is
 *   omitted (or $slideshow->is_new is TRUE), a new slideshow will be added.
 */
function panparks_slideshow_save($slideshow) {
  $transaction = db_transaction();

  try {
    // Load the stored entity, if any.
    if (!empty($slideshow->slid) && !isset($slideshow->original)) {
      $slideshow->original = entity_load_unchanged('panparks_slideshow', $slideshow->slid);
    }

    field_attach_presave('panparks_slideshow', $slideshow);

    // Determine if we will be inserting a new slideshow.
    if (!isset($slideshow->is_new)) {
      $slideshow->is_new = empty($slideshow->slid);
    }

    // Set the timestamp fields.
    if (empty($slideshow->created)) {
      $slideshow->created = REQUEST_TIME;
    }
    // The changed timestamp is always updated.
    $slideshow->changed = REQUEST_TIME;

    // Let modules modify the slideshow before it is saved to the slideshow.
    module_invoke_all('panparks_slideshow_presave', $slideshow);
    module_invoke_all('entity_presave', $slideshow, 'panparks_slideshow');

    // Save the slideshow.
    if ($slideshow->is_new) {
      // For new slideshows, save new records for both the slideshow itself.
      drupal_write_record('panparks_slideshow', $slideshow);
      $op = 'insert';
    }
    else {
      // For existing slideshows, update the slideshow record which matches the value of
      drupal_write_record('panparks_slideshow', $slideshow, 'slid');
      $op = 'update';
    }

    // Save fields.
    $function = "field_attach_$op";
    $function('panparks_slideshow', $slideshow);

    module_invoke_all('panparks_slideshow_' . $op, $slideshow);
    module_invoke_all('entity_' . $op, $slideshow, 'panparks_slideshow');

    $delete = $op == 'update';

    // Clear internal properties.
    unset($slideshow->is_new);
    unset($slideshow->original);
    // Clear the static loading cache.
    entity_get_controller('panparks_slideshow')->resetCache(array($slideshow->slid));

    // Ignore slave server temporarily to give time for the
    // saved slideshow to be propagated to the slave.
    db_ignore_slave();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('panparks_slideshow', $e);
    throw $e;
  }
}

/**
 * Delete a slideshow.
 *
 * @param $slid
 *   A slideshow ID.
 */
function panparks_slideshow_delete($slid) {
  panparks_slideshow_delete_multiple(array($slid));
}

/**
 * Delete multiple slidshows.
 *
 * @param $slids
 *   An array of slidshow IDs.
 */
function panparks_slideshow_delete_multiple($slids) {
  $transaction = db_transaction();
  if (!empty($slids)) {
    $slidshows = panparks_slideshow_load_multiple($slids);

    try {
      foreach ($slidshows as $slid => $slideshow) {
        // Call the slideshow-specific callback (if any):
        module_invoke_all('panparks_slideshow_delete', $slideshow);
        module_invoke_all('entity_delete', $slideshow, 'panparks_slideshow');
        field_attach_delete('panparks_slideshow', $slideshow);
      }

      // Delete after calling hooks so that they can query hai_domain tables as needed.
      db_delete('panparks_slideshow')
        ->condition('slid', $slids, 'IN')
        ->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('panparks_slideshow', $e);
      throw $e;
    }

    // Clear the page and block and haidomain_load_multiple caches.
    entity_get_controller('panparks_slideshow')->resetCache();
  }
}

function panparks_slideshow_overview_type() {
  return t('Manage panparks slideshow structure.');
}


